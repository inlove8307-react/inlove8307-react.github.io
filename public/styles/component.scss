@charset "utf-8";

/* <UxContainer> */
.ux-container {position: relative; padding-top: var(--height-header);}
.ux-container-before,
.ux-container-after {position: absolute; left: 0; width: 100%;}
.ux-container-before {top: 0;}
.ux-container-after {bottom: 0;}



/* <UxHeader> */
.ux-header {position: fixed; top: 0; left: 0; right: 0; height: var(--height-header); border-bottom: .1rem solid var(--light1); background-color: var(--light0); transition: all .25s ease-in-out;}
/* <UxHeader> InView */
.ux-container:not(.before) .ux-header {box-shadow: var(--shadow);}
/* <UxHeader> z-index */
.ux-header {z-index: 10;}



/* <UxMain> */
.ux-main {display: flex; justify-content: center;}



/* <UxAside> */
.ux-aside {--size: 12rem;}
.ux-aside {margin-left: calc(var(--size) * -1); padding-top: 3.2rem; width: var(--size);}
.ux-aside-list {display: flex; flex-wrap: wrap; gap: .4rem;}
.ux-aside-item {width: 100%;}
.ux-aside-link {color: var(--dark1);}
/* <UxAside> Mobile */
html.mobile .ux-aside {display: none;}



/* <UxFooter> */
.ux-footer {}



/* <UxSection> */
.ux-section {display: flex; flex-direction: column; width: 100%;}
/* <UxSection> Header */
.ux-header .ux-section {justify-content: center; height: 100%;}
/* <UxSection> Main */
.ux-main .ux-section {padding: 3.2rem 0;}
/* <UxSection> Desktop */
html.desktop .ux-section {width: var(--desktop);}
html.desktop .ux-header .ux-section {justify-content: center; margin: 0 auto; height: 100%;}
/* <UxSection> Modal */




/* <UxArticle> */
.ux-article {display: flex; flex-direction: column; gap: .8rem; width: 100%;}
/* <UxArticle> Space */
.ux-article.space {padding-left: var(--space); padding-right: var(--space);}
/* <UxArticle> Gap */
.ux-article.h3 {gap: 3.2rem;}
.ux-article.h4 {gap: 2.4rem;}
.ux-article.h5 {gap: 1.6rem;}
.ux-article.h6 {gap: 1.2rem;}



/* <UxSubject> */
.ux-subject {display: flex; flex-direction: column; width: 100%;}
/* <UxSubject> Space */
.ux-subject.space {padding-left: var(--space); padding-right: var(--space);}
/* <UxSubject> Row */
.ux-subject.row {flex-direction: row;}
.ux-subject.row.center {justify-content: center;}
.ux-subject.row.left {justify-content: flex-start;}
.ux-subject.row.right {justify-content: flex-end;}
/* <UxSubject> Column */
.ux-subject.column {flex-direction: column;}
.ux-subject.column.center {flex-direction: center;}
.ux-subject.column.left {align-items: flex-start;}
.ux-subject.column.right {align-items: flex-end;}
/* <UxSubject> Gap */
.ux-article.h3 > .ux-subject {gap: 3.2rem;}
.ux-article.h4 > .ux-subject {gap: 2.4rem;}
.ux-article.h5 > .ux-subject {gap: 1.6rem;}
.ux-article.h6 > .ux-subject {gap: 1.2rem;}



/* <UxContent> */
.ux-content {display: flex; flex-direction: column; width: 100%;}
/* <UxContent> Space */
.ux-content.space {padding-left: var(--space); padding-right: var(--space);}
/* <UxContent> Row */
.ux-content.row {flex-direction: row;}
.ux-content.row.center {justify-content: center;}
.ux-content.row.left {justify-content: flex-start;}
.ux-content.row.right {justify-content: flex-end;}
/* <UxContent> Column */
.ux-content.column {flex-direction: column;}
.ux-content.column.center {flex-direction: center;}
.ux-content.column.left {align-items: flex-start;}
.ux-content.column.right {align-items: flex-end;}
/* <UxContent> Gap */
.ux-article.h3 > .ux-content {gap: 3.2rem;}
.ux-article.h4 > .ux-content {gap: 2.4rem;}
.ux-article.h5 > .ux-content {gap: 1.6rem;}
.ux-article.h6 > .ux-content {gap: 1.2rem;}



/* <UxModal> */
.ux-modal {position: fixed; top: 0; left: 0; width: 100%; height: 100%;}
.ux-modal-backdrop {position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, .75);}
.ux-modal-base {overflow: hidden; position: relative; display: flex; flex-direction: column; background-color: var(--light0);}
/* <UxModal> Section */
.ux-modal .ux-section.header {padding: 1.6rem;}
.ux-modal .ux-section.main {padding: 0 1.6rem;}
.ux-modal .ux-section.footer {padding: 1.6rem;}
/* <UxModal> Section Desktop */
html.desktop .ux-modal .ux-section {width: 100%;}
/* <UxModal> Content */
.ux-modal .ux-section.header .ux-content {flex-direction: row; justify-content: space-between; align-items: flex-start;}
/* <UxModal> Center */
.ux-modal.center {display: flex; justify-content: center; align-items: center;}
.ux-modal.center .ux-modal-base {width: calc(100% - var(--space) * 2); border-radius: 1.6rem; transform: scale(.75); transition: transform .15s ease-in-out;}
/* <UxModal> Center Desktop */
html.desktop .ux-modal.center {justify-content: center;}
html.desktop .ux-modal.center .ux-modal-base {width: calc(var(--desktop) - var(--space) * 2);}
/* <UxModal> Center Active */
.ux-modal.center.active .ux-modal-base {transform: scale(1);}
/* <UxModal> Bottom */
.ux-modal.bottom {display: flex; justify-content: center; align-items: flex-end;}
.ux-modal.bottom .ux-modal-base {width: 100%; border-radius: 1.6rem 1.6rem 0 0; transform: translateY(100%); transition: transform .15s ease-in-out;}
/* <UxModal> Bottom Desktop */
html.desktop .ux-modal.bottom .ux-modal-base {width: var(--desktop);}
/* <UxModal> Bottom Active */
.ux-modal.bottom.active .ux-modal-base {transform: translateY(0);}
/* <UxModal> Full */
.ux-modal.full {display: flex; justify-content: stretch; align-items: stretch;}
.ux-modal.full .ux-modal-base {display: flex; flex-direction: column; width: 100%;}
.ux-modal.full .ux-section.main {flex-grow: 1;}
/* <UxModal> Full Desktop */
html.desktop .ux-modal.full {justify-content: center;}
html.desktop .ux-modal.full .ux-modal-base {width: var(--desktop);}
/* <UxModal> Toast */
.ux-modal.toast {display: flex; justify-content: center; align-items: flex-end; pointer-events: none;}
.ux-modal.toast .ux-modal-base {padding: 1.6rem 2rem; border-radius: 1.6rem; width: calc(100% - var(--space) * 2); background-color: rgba(0, 0, 0, .75); box-shadow: var(--shadow); color: var(--light0); transform: translateY(100%); transition: transform .15s ease-in-out;}
.ux-modal.toast .ux-modal-backdrop {background-color: rgba(0, 0, 0, 0); pointer-events: none;}
/* <UxModal> Toast Desktop */
html.desktop .ux-modal.toast {justify-content: center;}
html.desktop .ux-modal.toast .ux-modal-base {width: calc(var(--desktop) - var(--space) * 2);}
/* <UxModal> Toast Active */
.ux-modal.toast.active .ux-modal-base {transform: translateY(var(--space-minus));}
/* <UxModal> Popover */
.ux-modal.popover {display: flex; justify-content: center; align-items: flex-start;}
.ux-modal.popover .ux-modal-backdrop {background-color: rgba(0, 0, 0, 0);}
.ux-modal.popover .ux-modal-base {overflow: initial; position: relative; width: calc(100% - var(--space) * 2); background-color: rgba(0, 0, 0, 0);}
/* <UxModal> Popover Desktop */
html.desktop .ux-modal.popover .ux-modal-base {width: calc(var(--desktop) - var(--space) * 2);}
/* <UxModal> Tooltip */
.ux-modal.tooltip {display: flex; justify-content: stretch; align-items: stretch;}
.ux-modal.tooltip .ux-modal-backdrop {background-color: rgba(0, 0, 0, 0);}
/* <UxModal> z-index */
.ux-modal {z-index: 10;}



/* <UxPopover> */
.ux-popover-base {position: absolute; display: flex; align-items: flex-start; gap: .4rem; padding: .8rem .8rem .8rem 1.2rem; max-width: calc(100% - var(--space) * 2); border-radius: 1.2rem; background-color: rgba(0, 0, 0, .75); color: var(--light0); opacity: 0; transition: opacity .25s ease-in-out;}
.ux-popover-closer {flex-shrink: 0; padding: .2rem; height: 2.4rem;}
.ux-popover-closer .ux-icon.i303 {background-color: var(--light0);}
/* <UxPopover> Desktop */
.ux-popover-base {max-width: calc(var(--desktop) - var(--space) * 2);}
/* <UxPopover> Active */
.ux-modal.popover.active .ux-popover-base {opacity: 1;}



/* <UxDivider> */
.ux-divider {display: block; margin: 0; width: 100%; height: .8rem; border: 0; background-color: var(--light1);}
.ux-divider.linear {height: .1rem;}
.ux-divider.dashed {height: .1rem; background-image: repeating-linear-gradient(to right, var(--light2), var(--light2) .1rem, var(--light0) .1rem, var(--light0) .4rem);}



/* <UxGrid> */
.ux-grid {display: flex; flex-wrap: wrap; gap: var(--gap);}
/* <UxGrid> Row */
.ux-grid.row {flex-direction: row;}
.ux-grid.row.center {justify-content: center;}
.ux-grid.row.left {justify-content: flex-start;}
.ux-grid.row.right {justify-content: flex-end;}
/* <UxGrid> Column */
.ux-grid.column {flex-direction: column;}
.ux-grid.column.center {align-items: center;}
.ux-grid.column.left {align-items: flex-start;}
.ux-grid.column.right {align-items: flex-end;}
/* <UxGrid> Gap */
.ux-grid.gap16 {--gap: 1.6rem;}
.ux-grid.gap12 {--gap: 1.2rem;}
.ux-grid.gap8 {--gap: .8rem;}
.ux-grid.gap4 {--gap: .4rem;}
/* <UxGrid> Col */
.ux-grid.col1 {--col: 1;}
.ux-grid.col2 {--col: 2;}
.ux-grid.col3 {--col: 3;}
.ux-grid.col4 {--col: 4;}
.ux-grid.col5 {--col: 5;}
.ux-grid[class*=col] > * {width: calc((100% / var(--col)) - var(--gap) + (var(--gap) / var(--col)));}
/* <UxGrid> Grow */
.ux-grid > .grow {flex-shrink: 0;}
.ux-grid > .grow.auto {flex-grow: 0;}
.ux-grid > .grow.full {flex-grow: 1;}
.ux-grid > .grow.small {flex-basis: calc(100% / 3); width: calc(100% / 3);}



/* <UxList> */
.ux-list {--gap: 1.2rem;}
.ux-list {display: flex; flex-direction: column; gap: var(--gap);}
/* <UxList> Gap */
.ux-list.gap16 {--gap: 1.6rem;}
.ux-list.gap12 {--gap: 1.2rem;}
.ux-list.gap8 {--gap: .8rem;}
.ux-list.gap4 {--gap: .4rem;}
/* <UxList> Outline */
.ux-list.outline {padding: 1.6rem; border-radius: var(--radius-card); box-shadow: var(--inset);}
/* <UxList> Contain */
.ux-list.contain {padding: 1.6rem; border-radius: var(--radius-card); box-shadow: initial; background-color: var(--light1);}
/* <UxList> Dl */
.ux-list.dl dl {display: flex;}
.ux-list.dl dt {margin-right: auto;}
.ux-list.dl dd {margin-left: auto;}



/* <UxButton> */
.ux-button {display: inline-flex; justify-content: center; align-items: center; gap: .8rem; transform: translateZ(0); transition: var(--inset-transition);}
/* <UxButton> Align */
.ux-button.left {justify-content: flex-start;}
.ux-button.right {justify-content: flex-end;}
.ux-button .left {margin-right: auto;}
.ux-button .right {margin-left: auto;}
/* <UxButton> Size */
.ux-button.h3 {height: 4.8rem;}
.ux-button.h4 {height: 4.4rem;}
.ux-button.h5 {height: 4rem;}
.ux-button.h6 {height: 3.6rem;}
/* <UxButton> Outline */
.ux-button.outline {padding: 0 1.2rem; border-radius: var(--radius-form); box-shadow: var(--inset); background-color: var(--light0); color: var(--dark1); transition: var(--inset-transition);}
/* <UxButton> Contain */
.ux-button.contain {padding: 0 1.2rem; border-radius: var(--radius-form); background-color: var(--light1);}
/* <UxButton> Primary */
.ux-button.primary {padding: 0 1.2rem; border-radius: var(--radius-form); background-color: var(--color1); color: var(--light0);}
/* <UxButton> Secondary */
.ux-button.secondary {}
/* <UxButton> Tertiary */
.ux-button.tertiary {}
/* <UxButton> Focus */
.ux-button.outline:focus-within {box-shadow: var(--inset-focus);}
/* <UxButton> Valid */
.ux-button.outline.valid {box-shadow: var(--inset-valid);}
.ux-button.outline.valid:focus-within {box-shadow: var(--inset-valid-focus);}
/* <UxButton> Invalid */
.ux-button.outline.invalid {box-shadow: var(--inset-invalid);}
.ux-button.outline.invalid:focus-within {box-shadow: var(--inset-invalid-focus);}
/* <UxButton> Disabled */
.ux-button.outline.disabled {background-color: var(--light1); color: var(--dark3);}
.ux-button:not(.outline).disabled {opacity: .5;}



/* <UxInput> */
.ux-input {display: flex; align-items: center; gap: .8rem; padding: 0 var(--radius-form); height: var(--height-form); border-radius: var(--radius-form); box-shadow: var(--inset); background-color: var(--light0); transition: var(--inset-transition); transform: translateZ(0);}
.ux-input .ux-input-base {flex-grow: 1; flex-shrink: 0; flex-basis: 0; width: 100%; border: 0; background-color: transparent; caret-color: var(--dark3);}
.ux-input .ux-input-base:focus,
.ux-input .ux-input-base:focus-visible {outline: none;}
/* <UxInput> Align */
.ux-input.left .ux-input-base {text-align: left;}
.ux-input.right .ux-input-base {text-align: right;}
.ux-input.center .ux-input-base {text-align: center;}
/* <UxInput> Prefix */
.ux-input .ux-input-prefix {flex-shrink: 0;}
/* <UxInput> Suffix */
.ux-input .ux-input-suffix {flex-shrink: 0;}
/* <UxInput> Timer */
.ux-input .ux-input-timer {flex-shrink: 0; color: var(--invalid);}
/* <UxInput> Submit */
.ux-input .ux-button.submit {flex-shrink: 0; padding: 0 calc(var(--height-submit) / 2.75); width: initial; min-height: initial; height: var(--height-submit); border-radius: calc(var(--height-submit) / 2); background-color: var(--light1); font-size: 1.4rem; box-shadow: none;}
.ux-input .ux-button.submit:hover,
.ux-input .ux-button.submit:focus {box-shadow: none;}
/* <UxInput> Focus */
.ux-input:focus-within {box-shadow: var(--inset-focus);}
/* <UxInput> Valid */
.ux-input.valid {box-shadow: var(--inset-valid);}
.ux-input.valid:focus-within {box-shadow: var(--inset-valid-focus);}
/* <UxInput> Invalid */
.ux-input.invalid {box-shadow: var(--inset-invalid);}
.ux-input.invalid:focus-within {box-shadow: var(--inset-invalid-focus);}
/* <UxInput> Readonly */
.ux-input.readonly .ux-input-base,
.ux-input.readonly .ux-input-prefix,
.ux-input.readonly .ux-input-suffix,
.ux-input.readonly .ux-input-timer {color: var(--dark3);}
/* <UxInput> Disabled */
.ux-input.disabled {background-color: var(--light1);}
.ux-input.disabled .ux-input-base,
.ux-input.disabled .ux-input-prefix,
.ux-input.disabled .ux-input-suffix,
.ux-input.disabled .ux-input-timer {color: var(--dark3);}
/* <UxInput> Fix */
.ux-input-group .ux-input.fix {flex-shrink: 0;}



/* <UxMasking> */
.ux-masking {overflow-x: auto; display: flex; align-items: center; position: relative;}
.ux-masking::-webkit-scrollbar {display: none;}
/* <UxMasking> Mask */
.ux-masking .ux-masking-mask {display: flex; align-items: center; gap: .4rem; position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none;}
.ux-masking .ux-masking-item {flex-shrink: 0; width: .8rem; height: .8rem; border-radius: 50%; background-color: var(--light2);}
/* <UxMasking> Input */
.ux-masking .ux-masking-input {padding: 0; width: 100%; border: 0; background-color: transparent; color: transparent; caret-color: transparent;}
.ux-masking .ux-masking-input:focus,
.ux-masking .ux-masking-input:focus-visible {outline: none;}
.ux-masking .ux-masking-input::selection {background-color: transparent; /* WebKit/Blink Browsers */}
.ux-masking .ux-masking-input::-moz-selection {background-color: transparent; /* Gecko Browsers */}
/* <UxMasking> Enable */
.ux-masking .ux-masking-item.enabled {background-color: var(--dark2);}
/* <UxMasking> Readonly, Disabled */
.ux-masking.readonly .ux-masking-item,
.ux-masking.disabled .ux-masking-item {background-color: var(--dark3);}
/* <UxMasking> z-index */
.ux-masking .ux-masking-mask {z-index: 1;}



/* <UxPassword> */
.ux-password {display: flex; align-items: center; gap: .8rem; padding: 0 var(--radius-form); height: var(--height-form); border-radius: var(--radius-form); box-shadow: var(--inset); background-color: var(--light0); transition: var(--inset-transition); transform: translateZ(0);}
/* <UxPassword> Focus */
.ux-password:focus-within {box-shadow: var(--inset-focus);}
/* <UxPassword> Valid */
.ux-password.valid {box-shadow: var(--inset-valid);}
.ux-password.valid:focus-within {box-shadow: var(--inset-valid-focus);}
/* <UxPassword> Invalid */
.ux-password.invalid {box-shadow: var(--inset-invalid);}
.ux-password.invalid:focus-within {box-shadow: var(--inset-invalid-focus);}
/* <UxPassword> Disabled */
.ux-password.disabled {background-color: var(--light1);}
/* <UxPassword> Masking */
.ux-password .ux-masking {flex-grow: 1; height: 100%;}



/* <UxTextarea> */
.ux-textarea {display: flex; flex-direction: column; gap: .4rem; padding: 1.2rem var(--radius-form); border-radius: var(--radius-form); box-shadow: var(--inset); background-color: var(--light0); transition: var(--inset-transition); transform: translateZ(0);}
.ux-textarea .ux-textarea-base {display: flex; flex-direction: column;}
.ux-textarea .ux-textarea-input {overflow: hidden; width: 100%; border: 0; background-color: transparent; line-height: 2.4rem; caret-color: var(--dark3); white-space: normal; word-break: break-all; resize: none;}
.ux-textarea .ux-textarea-input:focus,
.ux-textarea .ux-textarea-input:focus-visible {outline: none;}
/* <UxTextarea> Count */
.ux-textarea .ux-textarea-count {text-align: right; font-size: 1.4rem; line-height: 1; color: var(--light3);}
/* <UxTextarea> Focus */
.ux-textarea:focus-within {box-shadow: var(--inset-focus);}
/* <UxTextarea> Valid */
.ux-textarea.valid {box-shadow: var(--inset-valid);}
.ux-textarea.valid:focus-within {box-shadow: var(--inset-valid-focus);}
/* <UxTextarea> Invalid */
.ux-textarea.invalid {box-shadow: var(--inset-invalid);}
.ux-textarea.invalid:focus-within {box-shadow: var(--inset-invalid-focus);}
/* <UxTextarea> Readonly */
.ux-textarea.readonly .ux-textarea-base {color: var(--dark3);}
/* <UxTextarea> Disabled */
.ux-textarea.disabled {background-color: var(--light1);}



/* <UxFile> */
.ux-file {display: flex; align-items: center;}
.ux-file .ux-file-base {position: relative;}
.ux-file .ux-file-input {overflow: hidden; visibility: visible; position: absolute; top: 0; left: 0; width: 0; height: 0;}
/* <UxFile> Default */
.ux-file:not(.slot) {gap: .8rem; padding: 0 var(--radius-form); height: var(--height-form); border-radius: var(--radius-form); box-shadow: var(--inset); background-color: var(--light0); transition: var(--inset-transition);}
.ux-file:not(.slot) .ux-file-base {display: flex; align-items: center; flex-grow: 1; flex-shrink: 0; flex-basis: 0; width: 100%; border: 0;}
.ux-file:not(.slot) .ux-file-base:focus,
.ux-file:not(.slot) .ux-file-base:focus-visible {outline: none;}
.ux-file:not(.slot) .ux-file-label {color: var(--light3);}
.ux-file:not(.slot) .ux-file-label.path {color: var(--dark0);}
.ux-file:not(.slot) .ux-file-button {flex-shrink: 0; padding: 0 calc(var(--height-submit) / 2.75); width: initial; min-height: initial; height: var(--height-submit); border-radius: calc(var(--height-submit) / 2); background-color: var(--light1); font-size: 1.4rem; box-shadow: none;}
/* <UxFile> Default Focus */
.ux-file.default:focus-within {box-shadow: var(--inset-focus);}
/* <UxFile> Slot */
.ux-file.slot .ux-button {flex-grow: 1;}



/* <UxInputGroup> */
.ux-input-group {display: flex; align-items: center; gap: .8rem; padding: 0 var(--radius-form); height: var(--height-form); border-radius: var(--radius-form); box-shadow: var(--inset); background-color: var(--light0); transition: var(--inset-transition); transform: translateZ(0);}
/* <UxInputGroup> Focus */
.ux-input-group:focus-within {box-shadow: var(--inset-focus);}
/* <UxInputGroup> Valid */
.ux-input-group.valid {box-shadow: var(--inset-valid);}
.ux-input-group.valid:focus-within {box-shadow: var(--inset-valid-focus);}
/* <UxInputGroup> Invalid */
.ux-input-group.invalid {box-shadow: var(--inset-invalid);}
.ux-input-group.invalid:focus-within {box-shadow: var(--inset-invalid-focus);}
/* <UxInputGroup> Disabled */
.ux-input-group.disabled {background-color: var(--light1);}
/* <UxInputGroup> Input */
.ux-input-group .ux-input {padding: 0; box-shadow: none; background-color: transparent;}
.ux-input-group .ux-input:focus-within {box-shadow: none;}
.ux-input-group.readonly .ux-input,
.ux-input-group.disabled .ux-input {background-color: transparent;}
/* <UxInputGroup> Password */
.ux-input-group .ux-password {flex-shrink: 0; padding: 0; box-shadow: none; background-color: transparent;}
.ux-input-group.readonly .ux-password,
.ux-input-group.disabled .ux-password {background-color: transparent;}
/* <UxInputGroup> Dash */
.ux-input-group .ux-input.dash::before,
.ux-input-group .ux-password.dash::before {content: ''; flex-shrink: 0; width: 6px; height: 2px; background-color: var(--light3);}
/* <UxInputGroup> Last */
.ux-input-group .ux-input.last,
.ux-input-group .ux-password.last {flex-grow: 1; flex-shrink: initial;}
/* <UxInputGroup> Submit */
.ux-input-group .ux-button.submit {flex-shrink: 0; padding: 0 calc(var(--height-submit) / 2.75); width: initial; min-height: initial; height: var(--height-submit); border-radius: calc(var(--height-submit) / 2); background-color: var(--light1); font-size: 1.4rem; box-shadow: none;}
.ux-input-group .ux-button.submit:hover,
.ux-input-group .ux-button.submit:focus {box-shadow: none;}



/* <UxSelect> */
.ux-select {display: flex;}
.ux-select .ux-button {flex-grow: 1; color: var(--dark3);}
.ux-select .ux-icon {margin-left: auto;}
/* <UxSelect> Selected */
.ux-select.selected .ux-button {color: var(--dark0);}
/* <UxOptions> */
.ux-modal .ux-section.options {padding: 1.6rem 0;}
.ux-options {display: flex; flex-direction: column;}
.ux-options li + li {border-top: .1rem solid var(--light1);}
/* <UxOption> */
.ux-option {display: flex; align-items: center; padding: 1.2rem 0;}
.ux-option-button {flex-grow: 1; text-align: left;}
/* <UxOption> Selected */
.ux-option.selected .ux-option-button {color: var(--color1);}
.ux-option.selected .ux-icon {background-color: var(--color1);}



/* <UxCheckbox> */
.ux-checkbox {display: inline-flex;}
.ux-checkbox .ux-checkbox-base {display: inline-flex; position: relative; align-items: center; gap: .8rem; cursor: pointer;}
.ux-checkbox .ux-checkbox-input[type=checkbox] {visibility: hidden; position: absolute; top: 0; left: 0; width: 0; height: 0; border: 0; background-color: transparent; opacity: 0;}
.ux-checkbox .ux-checkbox-label {flex-shrink: 0;}
.ux-checkbox .ux-icon {flex-shrink: 0; pointer-events: none;}
/* <UxCheckbox> Checked */
.ux-checkbox.checked .ux-icon {background-color: var(--color1);}
/* <UxCheckbox> Disabled */
.ux-checkbox.disabled .ux-icon {background-color: var(--light2);}



/* <UxCheckboxGroup> */
.ux-checkbox-group {display: flex;flex-wrap: wrap;gap: 1.6rem;}
.ux-checkbox-group .ux-checkbox {flex-grow: 1;}
/* <UxCheckboxGroup> Column */
.ux-checkbox-group.column {flex-direction: column;}



/* <UxRadio> */
.ux-radio {display: inline-flex;}
.ux-radio .ux-radio-base {display: inline-flex; position: relative; align-items: center; gap: .8rem; cursor: pointer;}
.ux-radio .ux-radio-input[type=radio] {visibility: hidden; position: absolute; top: 0; left: 0; width: 0; height: 0; border: 0; background-color: transparent; opacity: 0; z-index: -1;}
.ux-radio .ux-radio-label {flex-shrink: 0;}
.ux-radio .ux-icon {flex-shrink: 0;}
/* <UxRadio> Checked */
.ux-radio.checked .ux-icon {background-color: var(--color1);}
/* <UxRadio> Disabled */
.ux-radio.disabled .ux-icon {background-color: var(--light2);}



/* <UxRadioGroup> */
.ux-radio-group .ux-radio-scroll {display: flex; flex-wrap: wrap; gap: 1.6rem;}
.ux-radio-group .ux-radio {flex-grow: 1;}
/* <UxRadioGroup> Column */
.ux-radio-group.column .ux-radio-scroll {flex-direction: column;}
/* <UxRadioGroup> Gap */
.ux-radio-group.gap8 .ux-radio-scroll {gap: .8rem;}
.ux-radio-group.gap12 .ux-radio-scroll {gap: 1.2rem;}
.ux-radio-group.gap16 .ux-radio-scroll {gap: 1.6rem;}
/* <UxRadioGroup> Chip */
.ux-radio-group.chip .ux-radio-scroll {--height: 3.6rem; gap: .8rem;}
.ux-radio-group.chip .ux-radio {flex-grow: initial; height: var(--height); border-radius: calc(var(--height) / 2); background-color: var(--light1); transition: background-color .1s ease-in-out;}
.ux-radio-group.chip .ux-radio-base {padding: 0 calc(var(--height) / 3); width: 100%; height: 100%;}
.ux-radio-group.chip .ux-radio-label {line-height: 1;}
.ux-radio-group.chip .ux-radio .ux-icon {display: none;}
/* <UxRadioGroup> Chip Checked */
.ux-radio-group.chip .ux-radio.checked {background-color: var(--color1); color: var(--light0);}
/* <UxRadioGroup> Scroll */
.ux-radio-group.scroll {position: relative;}
.ux-radio-group.scroll::before,
.ux-radio-group.scroll::after {content: ''; position: absolute; top: 0; z-index: 1; width: 3.2rem; height: 100%; pointer-events: none; opacity: 0;}
.ux-radio-group.scroll::before {left: 0; background-image: linear-gradient(90deg, rgba(255, 255, 255, 1) 5%, rgba(255, 255, 255, 0) 50%);}
.ux-radio-group.scroll::after {right: 0; background-image: linear-gradient(270deg, rgba(255, 255, 255, 1) 5%, rgba(255, 255, 255, 0) 50%);}
.ux-radio-group.scroll:not(.before)::before {opacity: 1;}
.ux-radio-group.scroll:not(.after)::after {opacity: 1;}
.ux-radio-group.scroll .ux-radio-scroll {flex-wrap: initial; overflow-x: auto;}
.ux-radio-group.scroll .ux-radio-scroll::-webkit-scrollbar {display: none;}
.ux-radio-group.scroll .ux-radio-before,
.ux-radio-group.scroll .ux-radio-after {flex-shrink: 0; width: .1rem; height: .1rem;}
.ux-radio-group.scroll .ux-radio-before {margin-right: -.9rem;}
.ux-radio-group.scroll .ux-radio-after {margin-left: -.9rem;}
/* <UxRadioGroup> Expand */
.ux-radio-group.scroll.expand {display: flex;}
.ux-radio-group.scroll.expand .ux-radio-scroll {width: calc(100% - 3.2rem);}
.ux-radio-group.scroll.expand .ux-radio-expand {flex-shrink: 0;}
.ux-radio-group.scroll.expand .ux-radio-expand {display: inline-flex; justify-content: center; align-items: center; width: 3.2rem; height: 3.2rem;}
.ux-radio-group.scroll.expand:not(.after)::after {right: 3.2rem; background-image: linear-gradient(270deg, rgba(255, 255, 255, 1) 5%, rgba(255, 255, 255, 0) 75%);}
/* <UxRadioGroup> Expand Expanded */
.ux-radio-group.scroll.expand.expanded .ux-radio-scroll {flex-wrap: wrap;}



/* <UxSwitch> */
.ux-switch {--size: 3rem; --gap: .4rem;}
.ux-switch {display: flex; align-items: center; gap: .8rem;}
.ux-switch .ux-switch-base {display: inline-flex; align-items: center; position: relative; padding: var(--gap); width: calc((var(--size) + var(--gap)) * 2); height: calc(var(--size) + var(--gap) * 2); border-radius: calc((var(--size) + var(--gap) * 2) / 2); background-color: var(--light1); transition: background-color .15s ease-in-out;}
.ux-switch .ux-switch-input[type=checkbox] {visibility: hidden; position: absolute; top: 0; left: 0; width: 0; height: 0; border: 0; background-color: transparent; opacity: 0; z-index: -1;}
.ux-switch .ux-switch-ball {position: absolute; z-index: 1; top: var(--gap); left: var(--gap); width: var(--size); height: var(--size); border-radius: calc(var(--size) / 2); background-color: var(--light0); box-shadow: var(--shadow); transition: left .15s ease-in-out;}
.ux-switch .ux-switch-base::before,
.ux-switch .ux-switch-base::after {width: var(--size); font-size: 1.4rem; text-align: center; opacity: 0; transition: opacity .15s ease-in-out;}
.ux-switch .ux-switch-base::before {content: 'ON'; margin-right: auto; color: var(--light0);}
.ux-switch .ux-switch-base::after {content: 'OFF'; margin-left: auto; color: var(--dark3); opacity: 1;}
/* <UxSwitch> Checked */
.ux-switch.checked .ux-switch-base {background-color: var(--color1);}
.ux-switch.checked .ux-switch-ball {top: var(--gap); left: calc(100% - var(--size) - var(--gap));}
.ux-switch.checked .ux-switch-base::before {opacity: 1;}
.ux-switch.checked .ux-switch-base::after {opacity: 0;}



/* <UxToggle> */
.ux-toggle {display: flex; height: var(--height-form);}
.ux-toggle .ux-toggle-base {position: relative; display: flex; justify-content: center; align-items: center; padding: 0 var(--radius-form); width: 100%; height: 100%; cursor: pointer; transition: var(--inset-transition);}
.ux-toggle .ux-toggle-base::before {content: ''; position: absolute; top: 50%; left: 50%; width: 100%; height: 100%; border-radius: var(--radius-form); transform: translate(-50%, -50%) translateZ(0); transition: var(--inset-transition);}
.ux-toggle .ux-toggle-input[type=radio] {visibility: hidden; position: absolute; top: 0; left: 0; width: 0; height: 0; border: 0; background-color: transparent; opacity: 0; z-index: -1;}
.ux-toggle .ux-toggle-label {overflow: hidden; white-space: nowrap; text-overflow: ellipsis;}
/* <UxToggle> Checked */
.ux-toggle.checked .ux-toggle-base::before {box-shadow: var(--inset-color-focus);}



/* <UxToggleGroup> */
.ux-toggle-group {--col: 2;}
.ux-toggle-group {display: flex; flex-wrap: wrap; width: 100%; border-radius: var(--radius-form); box-shadow: var(--inset); background-image: repeating-linear-gradient(to right, var(--light0), var(--light0) var(--radius-form), transparent var(--radius-form), transparent calc(100%)), repeating-linear-gradient(to left, var(--light0), var(--light0) var(--radius-form), transparent var(--radius-form), transparent calc(100%)), repeating-linear-gradient(to bottom, transparent, transparent var(--height-form), var(--light1) var(--height-form), var(--light1) calc(var(--height-form) + .1rem)); background-color: var(--light0);}
.ux-toggle-group .ux-toggle {position: relative; flex-shrink: 0; width: calc(100% / var(--col));}
.ux-toggle-group .ux-toggle:not(:first-of-type):not(.checked)::before {content: ""; position: absolute; top: 50%; left: 0; width: .1rem; height: calc(var(--height-form) / 3); background-color: var(--light1); transform: translateY(-50%);}
.ux-toggle-group .ux-toggle.checked + .ux-toggle::before {display: none;}
/* <UxToggleGroup> Col */
.ux-toggle-group.col1 {--col: 1;}
.ux-toggle-group.col2 {--col: 2;}
.ux-toggle-group.col3 {--col: 3;}
.ux-toggle-group.col4 {--col: 4;}
.ux-toggle-group.col1 .ux-toggle:nth-child(1n + 1)::before,
.ux-toggle-group.col2 .ux-toggle:nth-child(2n + 1)::before,
.ux-toggle-group.col3 .ux-toggle:nth-child(3n + 1)::before,
.ux-toggle-group.col4 .ux-toggle:nth-child(4n + 1)::before {display: none;}



/* <UxCard> */
.ux-card {position: relative; border-radius: var(--radius-form);}
.ux-card-base {display: flex; padding: 1.2rem; width: 100%; border-radius: var(--radius-form); box-shadow: var(--inset); transition: var(--inset-transition);}
.ux-card-label {position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none;}
.ux-card-input[type=radio],
.ux-card-input[type=checkbox] {visibility: hidden; position: absolute; top: 0; left: 0; width: 0; height: 0; border: 0; background-color: transparent; opacity: 0; z-index: -1;}
/* <UxCard> Checked */
.ux-card.checked {box-shadow: var(--shadow);}
.ux-card.checked .ux-card-base {box-shadow: var(--inset-color-focus);}



/* <UxCardGroup> */
.ux-card-group {--col: 1; --gap: .8rem;}
.ux-card-group {display: flex; flex-wrap: wrap; gap: var(--gap);}
.ux-card-group .ux-card {width: calc((100% / var(--col)) - var(--gap) + (var(--gap) / var(--col)));}
/* <UxCardGroup> Gap */
.ux-card-group.gap16 {--gap: 1.6rem;}
.ux-card-group.gap12 {--gap: 1.2rem;}
.ux-card-group.gap8 {--gap: .8rem;}
.ux-card-group.gap4 {--gap: .4rem;}
/* <UxCardGroup> Col */
.ux-card-group.col1 {--col: 1;}
.ux-card-group.col2 {--col: 2;}
.ux-card-group.col3 {--col: 3;}
.ux-card-group.col4 {--col: 4;}



/* <UxCollapse> */
.ux-collapse {display: flex; flex-direction: column; border-radius: var(--radius-form); box-shadow: var(--inset);}
.ux-collapse + .ux-collapse {border-top: .1rem solid var(--light2);}
.ux-collapse-summary {display: flex; align-items: center; min-height: var(--height-form);}
.ux-collapse-summary [data-role=summary] {flex-grow: 1; padding-left: 1.2rem;}
.ux-collapse-button {flex-shrink: 0; display: flex; align-items: center; padding: 0 var(--radius-form);}
.ux-collapse-details {overflow: hidden; max-height: 0; box-shadow: var(--index); transition: max-height .15s ease-in-out;}
.ux-collapse-details [data-role=details] {padding: 1.2rem;}
/* <UxCollapse> Expanded */
.ux-collapse.expanded .ux-collapse-details {max-height: auto;}
/* <UxCollapseGroup> */
.ux-collapse-group {overflow: hidden; width: 100%; border-radius: var(--radius-form); border: .1rem solid var(--light2); background-color: var(--light0);}
.ux-collapse-group .ux-collapse {border-radius: initial; box-shadow: initial;}



/* <UxTab> */
.ux-tab {--height: 4rem;}
.ux-tab {width: 100%; background-color: var(--light0)}
.ux-tab .ux-tab-base {overflow: hidden}
.ux-tab .ux-tab-scroll {overflow-x: hidden; position: relative; box-shadow: inset 0 -.1rem 0 var(--light1);}
.ux-tab .ux-tab-list {display: flex; position: relative;}
.ux-tab .ux-tab-button {flex-shrink: 0; display: inline-flex; justify-content: center; align-items: center;padding: 0 1.6rem; height: var(--height); box-shadow: inset 0 -.1rem 0 transparent; color: var(--dark3); transition: box-shadow .1s ease-in-out;}
.ux-tab .ux-tab-button.active {box-shadow: inset 0 -.2rem 0 var(--color1); color: var(--color1);}
/* <UxTab> Linear */
.ux-tab.linear .ux-tab-button.active {box-shadow: none}
.ux-tab.linear .ux-tab-linear {position: absolute; bottom: 0; left: 0; height: .2rem; background-color: var(--color1); transition: all .1s ease-in-out}
/* <UxTab> Scroll */
.ux-tab.scroll {position: relative;}
.ux-tab.scroll .ux-tab-scroll {overflow-x: auto;}
.ux-tab.scroll .ux-tab-scroll::-webkit-scrollbar {display: none}
.ux-tab.scroll::before,
.ux-tab.scroll::after {content: ''; position: absolute; top: 0; width: 3.2rem; height: var(--height); pointer-events: none; opacity: 0;}
.ux-tab.scroll::before {left: 0; background-image: linear-gradient(90deg, rgba(255, 255, 255, 1) 5%, rgba(255, 255, 255, 0) 50%);}
.ux-tab.scroll::after {right: 0; background-image: linear-gradient(270deg, rgba(255, 255, 255, 1) 5%, rgba(255, 255, 255, 0) 50%);}
.ux-tab.scroll:not(.before)::before,
.ux-tab.scroll:not(.after)::after {opacity: 1;}
/* <UxTab> Full */
.ux-tab.full .ux-tab-button {flex-grow: 1; flex-basis: 0}
/* <UxTab> Block */
.ux-tab.block .ux-tab-scroll {box-shadow: initial;}
.ux-tab.block .ux-tab-list {border-radius: 1.2rem; background-color: var(--light1);}
.ux-tab.block .ux-tab-linear {display: flex; padding: .4rem; height: 100%; background-color: transparent; box-shadow: initial;}
.ux-tab.block .ux-tab-linear::after {content: ''; width: 100%; height: 100%; border-radius: .8rem; background-color: var(--light0);}
/* <UxPanel> */
.ux-tab .ux-panel {display: none; padding: 1.2rem 1.6rem;}
.ux-tab .ux-panel.active {display: block}
/* <UxTab> z-index */
.ux-tab .ux-tab-list {z-index: 1;}
.ux-tab .ux-tab-button {z-index: 1;}
.ux-tab.scroll::before,
.ux-tab.scroll::after {z-index: 2;}



/* <UxPagination> */
.ux-pagination {--size: 2.4rem; --gap: .4rem;}
.ux-pagination .ux-pagination-base {display: flex; justify-content: center; align-items: center;}
/* <UxPagination> */
.ux-pagination .ux-pagination-page {flex-shrink: 0; display: inline-flex; justify-content: center; align-items: center; padding: 0 calc(var(--gap)); height: var(--size); color: var(--light3);}
/* <UxPagination> Selected */
.ux-pagination .ux-pagination-page.selected {font-weight: 800; color: var(--color1); pointer-events: none;}
/* <UxPagination> Disabled */
.ux-pagination .ux-pagination-first,
.ux-pagination .ux-pagination-prev,
.ux-pagination .ux-pagination-next,
.ux-pagination .ux-pagination-last {flex-shrink: 0; display: inline-flex; justify-content: center; align-items: center; width: 2rem; height: var(--size);}
/* <UxPagination> Disabled */
.ux-pagination .ux-pagination-first.disabled,
.ux-pagination .ux-pagination-prev.disabled,
.ux-pagination .ux-pagination-next.disabled,
.ux-pagination .ux-pagination-last.disabled {opacity: 0.5; pointer-events: none;}



/* <UxCalendar> */
.ux-calendar {}
.ux-calendar-base {}
/* <UxCalendar> Header */
.ux-calendar-header {display: flex; justify-content: center; gap: 3.2rem; height: 4rem;}
.ux-calendar-header .ux-calendar-select {display: flex; align-items: center; gap: .8rem; padding: 0;}
.ux-calendar-header .ux-calendar-prev,
.ux-calendar-header .ux-calendar-next {display: flex; align-items: center; gap: .8rem; padding: 0;}
/* <UxCalendar> Content */
.ux-calendar-content {position: relative;}
/* <UxCalendar> DateCalendar */
.ux-calendar-date {display: grid; grid-template-columns: repeat(7, 1fr);}
.ux-calendar-date > :nth-child(7n),
.ux-calendar-date > :nth-child(7n + 1) {color: var(--color1);}
.ux-calendar-date .ux-calendar-week {display: flex; justify-content: center; align-items: center; height: 4rem;}
.ux-calendar-date .ux-calendar-button {display: flex; justify-content: center; align-items: center;}
.ux-calendar-date .ux-calendar-button .ux-calendar-label {display: flex; justify-content: center; align-items: center; width: 4rem; height: 4rem; border-radius: 50%;}
/* <UxCalendar> DateCalendar Today */
.ux-calendar-date .ux-calendar-button.today .ux-calendar-label {background-color: var(--light1);}
/* <UxCalendar> DateCalendar Icons */
.ux-calendar-date .ux-calendar-button.icons {flex-direction: column; justify-content: flex-start; gap: .4rem; padding-top: .4rem;}
.ux-calendar-date .ux-calendar-button.icons .ux-calendar-icons {display: flex; gap: .4rem;}
.ux-calendar-date .ux-calendar-button.icons.selected .ux-calendar-icons .ux-icon {background-color: var(--color1);}
/* <UxCalendar> DateCalendar Disabled */
.ux-calendar-date .ux-calendar-button.disabled {opacity: .5;}
/* <UxCalendar> DateCalendar Selected */
.ux-calendar-date .ux-calendar-button.selected .ux-calendar-label {background-color: var(--color1); font-weight: 600; color: var(--light0);}
/* <UxCalendar> MonthCalendar */
.ux-calendar-month {display: flex; flex-wrap: wrap; align-items: center; width: 100%; height: 28rem; background-color: var(--light0);}
.ux-calendar-month .ux-calendar-button {width: calc(100% / 3);}
.ux-calendar-month .ux-calendar-button {display: flex; justify-content: center; align-items: center; height: 4rem;}
.ux-calendar-month .ux-calendar-button .ux-calendar-label {display: flex; justify-content: center; align-items: center; width: 4rem; height: 4rem; border-radius: 50%;}
/* <UxCalendar> MonthCalendar Selected */
.ux-calendar-month .ux-calendar-button.selected .ux-calendar-label {background-color: var(--color1); font-weight: 600; color: var(--light0);}
/* <UxCalendar> YearCalendar */
.ux-calendar-year {overflow-y: auto; display: flex; flex-wrap: wrap; align-items: center; width: 100%; height: 28rem; background-color: var(--light0);}
.ux-calendar-year .ux-calendar-button.direction {width: 100%;}
.ux-calendar-year .ux-calendar-button {display: flex; justify-content: center; align-items: center; height: 4rem;}
.ux-calendar-year .ux-calendar-button .ux-calendar-label {display: flex; justify-content: center; align-items: center; width: 100%; height: 4rem; border-radius: 2rem;}
/* <UxCalendar> YearCalendar Selected */
.ux-calendar-year .ux-calendar-button.selected .ux-calendar-label {background-color: var(--color1); font-weight: 600; color: var(--light0);}



/* <UxSlider> */
.ux-slider {--range-height: .6rem; --range-radius: calc(var(--range-height) / 2); --thumb-width: 2.4rem; --thumb-radius: calc(var(--thumb-width) / 2); display: flex; flex-direction: column; position: relative; width: 100%; height: var(--thumb-width);}
.ux-slider .ux-slider-base {position: relative; top: 50%; left: 0; transform: translateY(-50%);}
.ux-slider .ux-slider-input[type=range] {-webkit-appearance: none; appearance: none; position: absolute; top: 50%; width: 100%; height: var(--range-height); border-radius: var(--range-radius); background-color: var(--light1); transform: translateY(-50%) translateZ(0); pointer-events: none;}
.ux-slider .ux-slider-input[type=range].from { height: 0;}
.ux-slider .ux-slider-input[type=range]::-webkit-slider-thumb {-webkit-appearance: none; appearance: none; width: var(--thumb-width); height: var(--thumb-width); border: 0; border-radius: var(--thumb-radius); background-color: var(--light0); box-shadow: var(--inset-color-focus); pointer-events: all; cursor: pointer;}
.ux-slider .ux-slider-input[type=range]::-moz-range-thumb {-webkit-appearance: none; appearance: none; width: var(--thumb-width); height: var(--thumb-width); border: 0; border-radius: var(--thumb-radius); background-color: var(--light0); box-shadow: var(--inset-color-focus); pointer-events: all; cursor: pointer;}
/* <UxSlider> z-index */
.ux-slider .ux-slider-base {z-index: 0;}
.ux-slider .ux-slider-input[type=range].from {z-index: 1;}
.ux-slider .ux-slider-input[type=range].to {z-index: 0;}
.ux-slider.toggle .ux-slider-input[type=range].to {z-index: 2;}



/* <UxProgress> */
.ux-progress {--gap: .4rem; --size: 2.4rem; --trans: transform 1s ease-in-out;}
.ux-progress .ux-progress-base {display: flex; flex-direction: column; gap: var(--gap);}
/* <UxProgress> Track */
.ux-progress .ux-progress-track,
.ux-progress .ux-progress-stack,
.ux-progress .ux-progress-gauge,
.ux-progress .ux-progress-fill {height: var(--size); border-radius: calc(var(--size) / 2);}
.ux-progress .ux-progress-track {position: relative;}
.ux-progress .ux-progress-stack,
.ux-progress .ux-progress-gauge {position: absolute; top: 0; left: 0;}
.ux-progress .ux-progress-stack {width: 100%; background-color: var(--light1);}
.ux-progress .ux-progress-gauge {overflow: hidden; width: 100%;}
.ux-progress .ux-progress-fill {background-color: var(--color1); transform: translateX(-100%); transition: var(--trans);}
/* <UxProgress> Flag */
.ux-progress .ux-progress-flag {display: flex; justify-content: flex-end; width: 100%; transform: translateX(-100%); transition: var(--trans); opacity: 0;}
.ux-progress .ux-progress-text {display: inline-flex; padding: .4rem .8rem; border-radius: .8rem; background-color: var(--light1); font-size: 1.4rem; color: var(--dark3); line-height: 1;}
/* <UxProgress> Flag Animation */
.ux-progress .ux-progress-flag.done {
	animation-name: ux-progress-flag-fade;
	animation-iteration-count: 1;
	animation-timing-function: ease-in-out;
	animation-duration: .25s;
	animation-fill-mode: forwards;
}
@keyframes ux-progress-flag-fade {
	0% { opacity: 0 }
	100% { opacity: 1 }
}
/* <UxProgress> Step */
.ux-progress .ux-progress-step {--size: 1.2rem;}
.ux-progress .ux-progress-step:empty {display: none;}
.ux-progress .ux-progress-step {position: relative; height: calc(var(--size) + var(--gap));}
.ux-progress .ux-progress-label {position: absolute; padding: calc(var(--gap) / 2) 0; font-size: var(--size); line-height: 1; color: var(--light2); transform: translate(-50%, 0);}
.ux-progress .ux-progress-label::before {content: ''; position: absolute; top: 0; left: 50%; width: .1rem; height: var(--gap); background-color: var(--light1); transform: translate(-50%, -100%);}
/* <UxProgress> Range */
.ux-progress .ux-progress-range {display: flex; font-size: 1.4rem; line-height: 1; color: var(--light3);}
.ux-progress .ux-progress-range:empty {display: none;}
.ux-progress .ux-progress-from {margin-right: auto;}
.ux-progress .ux-progress-to {margin-left: auto;}
/* <UxProgress> Legend */
.ux-progress .ux-progress-legend {display: flex; font-size: 1.4rem; line-height: 1; color: var(--light3);}
.ux-progress .ux-progress-legend:empty {display: none;}



/* <UxSortList> */
.ux-sort-list {--radius: 1.2rem;}
.ux-sort-list {display: flex; flex-direction: column; gap: .8rem;}
/* <UxSortItem> */
.ux-sort-item {border-radius: var(--radius); background-color: var(--light0); transition: var(--inset-transition);}
.ux-sort-base {display: flex; justify-content: center; align-items: center; padding: 1.2rem 0 1.2rem 1.6rem; border-radius: var(--radius); box-shadow: var(--inset); transition: var(--inset-transition);}
.ux-sort-base dt {font-weight: 600;}
.ux-sort-base dd {color: var(--dark3);}
.ux-sort-button {display: flex; justify-content: center; align-items: center; margin-left: auto; width: 4.8rem; height: 4.8rem; touch-action: none;}
/* <UxSortItem> Active */
.ux-sort-item.active {box-shadow: var(--shadow); z-index: 1;}
.ux-sort-item.active .ux-sort-base {box-shadow: var(--inset-color-focus);}